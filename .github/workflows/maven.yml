---
name: Java CI with Maven, SonarQube, and Production Deployment
on:
  push:
    branches:
      - master
      - feature/*
  pull_request:
    branches:
      - master
      - feature/*
  workflow_dispatch:
    inputs:
      deploy:
        description: Trigger deploy to production
        required: true
        default: "false"
jobs:
  build_and_test:
    runs-on:
      - self-hosted
      - staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run Environment Setup Script (env-setup.sh)
        run: |
          chmod +x ./env-setup.sh
          ./env-setup.sh  # This sets up Java, Maven, etc.
      - name: Build with Maven
        run: mvn clean install -DskipTests
        if: ${{ github.event_name != 'pull_request' }}
      - name: Run Unit Tests with Maven
        run: mvn test
        if: ${{ success() }}
  sonar_analysis:
    runs-on:
      - self-hosted
      - staging
    needs: build_and_test
    if: ${{ needs.build_and_test.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run SonarQube analysis
        uses: SonarSource/sonarcloud-github-action@v1
        with:
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          sonar-host-url: https://sonarcloud.io
  upload_artifact:
    runs-on:
      - self-hosted
      - staging
    needs: build_and_test
    if: ${{ needs.build_and_test.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Upload Artifact to JFrog Artifactory
        run: >
          echo "Uploading artifact to JFrog Artifactory..."

          curl -u "${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_API_KEY }}" \
               -T target/my-helloworld.war \
               "https://jfrog.example.com/artifactory/my-repo/my-helloworld-${{ needs.build_and_test.outputs.version }}.war"
  deploy:
    runs-on: self-hosted-${{ matrix.environment }}
    needs:
      - sonar_analysis
      - upload_artifact
    strategy:
      matrix:
        environment:
          - staging
          - production
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Deploy to Tomcat (Staging/Production)
        run: >
          echo "Deploying to ${matrix.environment}..."


          # Ensure SSH keys are securely stored

          if [ "${{ matrix.environment }}" == "staging" ]; then
            # Deployment to the staging environment
            scp -i ${{ secrets.STAGING_SSH_KEY }} target/my-helloworld.war ec2-user@staging:/path/to/tomcat/webapps/
            ssh -i ${{ secrets.STAGING_SSH_KEY }} ec2-user@staging "systemctl restart tomcat"
          elif [ "${{ matrix.environment }}" == "production" ]; then
            # Deployment to the production environment (only triggered on master branch)
            if [[ $GITHUB_REF == "refs/heads/master" ]]; then
              scp -i ${{ secrets.PRODUCTION_SSH_KEY }} target/my-helloworld.war ec2-user@production:/path/to/tomcat/webapps/
              ssh -i ${{ secrets.PRODUCTION_SSH_KEY }} ec2-user@production "systemctl restart tomcat"
            else
              echo "Skipping production deployment: Only from master branch"
            fi
          fi
        if: ${{ needs.upload_artifact.result == 'success' }}
  deploy_input_condition:
    runs-on:
      - self-hosted
      - production
    if: ${{ github.event.inputs.deploy == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Deploy to Production (Input Triggered)
        run: |
          echo "Manual deploy triggered, deploying to production..."
          # Deployment logic here
        if: ${{ github.event.inputs.deploy == 'true' }}
